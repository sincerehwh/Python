''' 
CSS

XPath

Json简介

Python处理XML方法

正则表达式入门

Selenium简介和实战 

'''


# CSS
# CSS = Cascading Style Sheets
# CSS规则：选择器，以及一条或多条声明: selector {declaration1; ...; desclarationN}
# 每条声明是由一个属性和一个值组成: property: value
# 例子：h1 {color: red; font-size: 14px}
#
# 元素选择器：
#	直接选择文档元素，如head，p
#
# 类选择器：
# 	元素的class属性，比如<h1 class="important">
#   类名就是important
#	.important选择所有有这个类属性的元素
#	结合元素选择器，比如p.important
#
# ID选择器：
#	元素的id属性，比如<h1 id="intro"†>
#   id就是important
# 	intro用于选择id=intro的元素
#	结合元素选择器，比如p.important
# 	--> 类选择器的异同：
#		 ID一个文档只能出现一次
# 		 ID选择器不能使用单词列表
#		 与类选择器一样，都区分大小写
#
# 后代（包含）选择器:
#	选择某元素后代的元素（层级不受限制
#	选择h1元素的em元素：h1 em
#
# 子元素选择器:
#	范围限制在子元素
#	选择h1元素的子元素strong：h1 > strong
#



# XPath
#  	使用路径表达式在XML文档中进行导航
#	包含一个标准函数库
#	是XSLT的主要元素
#	是一个W3C标准
#
# 七种基本节点:
#	元素、属性、文本、命名空间、处理指令、注释、根节点
#
# 节点之间的关系：
#	父、子、同胞（兄弟）、先辈、后代
#
# 路径表达式：
#	nodename 选取此节点的所有子节点
#	/ 从根节点选取
#	// 从匹配的当前节点选择文档中的节点，而不考虑它们的位置
#	. 选取当前节点
#	.. 选取当前节点的父节点
#	@ 选取属性
#
# 路径表达式例子：
#	bookstore 选取bookstore元素的所有子节点
#	/bookstore 选取根元素bookstore
#	/bookstore/book 选取属于bookstore的子元素的所有book元素
#	//book 选取所有book元素，而不管它们在文档中的位置
#	bookstore//book 选择属于bookstore元素的后代的所有book元素
#	//@lang 选取名为lang的所有属性
#
# 谓语：
#	嵌在[]中用来查找某个特定节点或包含某个指定值得节点
#	/bookstore/book[1] 第一个book元素
#	/bookstore/book[last()] 最后一个book元素
#	/bookstore/book[position()<3] 选择前2个
#	//title[@lang] 选择所拥有有名为lang的属性的title元素
#	/bookstore/book[price>35.00]
#	
# 与CSS选择器的比较：
#	CSS更加简洁
#	XPath选择功能更加强大！重点在于层级切换
#
#


# Json = JavaScript Object Notation
# 类似XML,但是比 XML 更小、更快，更易解析
# 使用json库处理json，编码与解码
#
# 


# Python处理XML方法
# 
# DOM 把整个XML读入内存，解析为树，因此
#	缺点：占用内存大，解析慢，
#	优点：可以任意遍历树的节点
#
# SAX 流模式，边读边解析，
#	缺点：需要自己处理事件
#	优点：占用内存小，解析快，
#


# 正则表达式入门
#
# 基本匹配规则:
#	[0-9] 任意一个数字，等价\d
#	[a-z] 任意一个小写字母
#	[A-Z]任意一个大写字母
#	[^0-9] 匹配非数字，等价\D
#	\w 等价[a-z0-9_]，字母数字下划线
#	\W 等价对\w取非
#	. 任意字符
#	[] 匹配内部任意字符或子表达式
#	[^] 对字符集合取非
#	* 匹配前面的字符或者子表达式0次或多次
#	+ 匹配前一个字符至少1次
#	？ 匹配前一个字符0次或多次
#	^ 匹配字符串开头
#	$ 匹配字符串结束
#
# Python使用正则表达式:
#	re模块
# 	match 匹配结果
#	pattern 编译好的正则表达式
#
#
#

